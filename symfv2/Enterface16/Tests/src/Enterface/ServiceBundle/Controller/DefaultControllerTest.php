<?php
namespace Enterface\ServiceBundle\Controller;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-02-16 at 13:18:34.
 */
class DefaultControllerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var DefaultController
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new DefaultController;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Enterface\ServiceBundle\Controller\DefaultController::indexAction
     * @todo   Implement testIndexAction().
     */
    public function testIndexAction()
    {
        /* // NE FONCTIONNE PLUS.
        $view = "EnterfaceServiceBundle:Default:index.html.twig";
        $params = array('mail'=>0,'basicCleoPrice' => $basicCleoPrice,
                    'basicClesPrice' => $basicClesPrice,
                    'basicMedBoxPrice' => $basicMedBoxPrice,
                    'advancedCleoPrice' => $advancedCleoPrice,
                    'advancedClesPrice' => $advancedClesPrice,
                    'advancedMedBoxPrice'=>$advancedMedBoxPrice,
                    'personalizedCleoPrice'=>$personalizedCleoPrice,
                    'PersonalizedClesPrice'=>$PersonalizedClesPrice,
                    'PersonalizedMedBoxPrice'=>$PersonalizedMedBoxPrice
                    );
        $response = $this->createMock("Symfony\Component\HttpFoundation\Response");
        
        $template = $this->createMock('Symfony\Bundle\FrameworkBundle\Templating\EngineInterface');
        $template
            ->expects($this->once())
            ->method("renderResponse")
            ->with($view, $params, null)
            ->will($this->returnValue($response));
        
        $container = $this->createMock("Symfony\Component\DependencyInjection\ContainerInterface");
        $container->expects($this->at(0))
            ->method("get")
            ->with("templating")
            ->will($this->returnValue($template));
        
        $controller = new DefaultController();
        $controller->setContainer($container);
        
        $this->assertSame($response, $controller->indexAction());
         */
    }
}
